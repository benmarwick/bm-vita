code[Database1[,2]=="Img"] <- "green"
plot(pl.2, col = code)
Database1[,2]=="Doc"]
Database1[,2]=="Doc"
devtools::add_readme
devtools::install_github('rstudio/blogdown')
install.packages("xfun")
devtools::install_github('rstudio/blogdown')
blogdown::new_site(theme = 'spf13/hyde')
devtools::install_github("swarm-lab/Rvision")
install.packages("ROpenCVLite")
devtools::install_github("swarm-lab/ROpenCVLite")
devtools::install_github("swarm-lab/ROpenCVLite")
rrtools::use_compendium("caa2018")
library(shiny)
library(leaflet)
ui <- shinyUI(fluidPage(
actionButton("button", "Change style!"),
leafletOutput("myMap")
))
server <- function(input, output){
map = leaflet() %>% addProviderTiles("Stamen.TonerLite") %>% setView(-1.5, 53.4, 9)
output$myMap = renderLeaflet(map)
sp <- reactiveValues()
ep <- reactiveValues()
area <- reactiveValues()
observeEvent(sp$lat, {
leafletProxy("myMap") %>% addMarkers(lat = sp$lat, lng = sp$lng)
})
observeEvent(ep$lat, {
leafletProxy("myMap") %>% addCircles(lat = ep$lat, lng = ep$lng)
})
observeEvent(area$mp, {
leafletProxy("myMap") %>% addPolygons(lat = area$mp[ , 1], lng = area$mp[ , 2])
})
observeEvent(input$myMap_click, {
coords <- input$myMap_click
if ( (!is.null(input$button) && (!is.null(coords))) ) {
if (input$button %% 4 == 1) {
sp[["lat"]] <- coords$lat
sp[["lng"]] <- coords$lng
} else if (input$button %% 4 == 2) {
ep[["lat"]] <- coords$lat
ep[["lng"]] <- coords$lng
} else if (input$button %% 4 == 3) {
cm <- matrix(data = c(coords$lat, coords$lng), nrow = 1, ncol = 2)
area$mp <- if(!is.null(area$mp)){rbind(area$mp, cm)}else{cm}
} else {
print("Kawum!")
}
}
})
}
shinyApp(ui, server)
leaflet() %>%
setView(0,0,2) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addDrawToolbar(
targetGroup='draw',
editOptions = editToolbarOptions(selectedPathOptions = selectedPathOptions()))  %>%
addLayersControl(overlayGroups = c('draw'), options =
layersControlOptions(collapsed=FALSE)) %>%
addStyleEditor()
leaflet()
library(leaflet.extras)
leaflet() %>%
setView(0,0,2) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addDrawToolbar(
targetGroup='draw',
editOptions = editToolbarOptions(selectedPathOptions = selectedPathOptions()))  %>%
addLayersControl(overlayGroups = c('draw'), options =
layersControlOptions(collapsed=FALSE)) %>%
addStyleEditor()
targetGroup='draw',
editOptions = editToolbarOptions(selectedPathOptions = selectedPathOptions()))  %>%
addLayersControl(overlayGroups = c('draw'), options =
layersControlOptions(collapsed=FALSE))
leaflet() %>%
setView(0,0,2) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addDrawToolbar(
targetGroup='draw',
editOptions = editToolbarOptions(selectedPathOptions = selectedPathOptions()))  %>%
addLayersControl(overlayGroups = c('draw'), options =
layersControlOptions(collapsed=FALSE))
devtools::install_github("r-spatial/mapedit")
library(mapedit)
library(mapview)
library(sf)
# make the coordinates a numeric matrix
qk_mx <- data.matrix(quakes[,2:1])
# convert the coordinates to a multipoint feature
qk_mp <- st_multipoint(qk_mx)
# convert the multipoint feature to sf
qk_sf <- st_sf(st_cast(st_sfc(qk_mp), "POINT"), quakes, crs=4326)
quakes
qk_mx
?data.matrix
# convert the coordinates to a multipoint feature
qk_mp <- st_multipoint(qk_mx)
qk_mp
# convert the multipoint feature to sf
qk_sf <- st_sf(st_cast(st_sfc(qk_mp), "POINT"), quakes, crs=4326)
qk_sf
# make a grid
grd <- st_set_crs(st_make_grid(qk_sf), 4326)
# only keep grid polygons that contain at least one quake point
grd <- grd[which(sapply(st_contains(st_sf(grd), qk_sf),length)>0)]
#------
library(mapview)
library(mapedit)
library(shiny)
ui <- fluidPage(
fluidRow(
column(
6,
h3("Select Grid"),
# our new select module ui
selectModUI("selectmap")
),
column(
6,
h3("Selected Quakes"),
plotOutput("selectplot")
)
),
fluidRow(
h3("Magnitude Distribution of Selected Quakes"),
plotOutput("quakestat", height=200)
)
)
server <- function(input, output, session) {
# our new select module
g_sel <- callModule(
selectMod,
"selectmap",
leaflet() %>%
addTiles() %>%
addFeatures(st_sf(grd), layerId = ~seq_len(length(grd)))
)
rv <- reactiveValues(intersect=NULL, selectgrid=NULL)
observe({
# the select module returns a reactive
#   so let's use it to find the intersection
#   of selected grid with quakes points
gs <- g_sel()
rv$selectgrid <- st_sf(
grd[as.numeric(gs[which(gs$selected==TRUE),"id"])]
)
if(length(rv$selectgrid) > 0) {
rv$intersect <- st_intersection(rv$selectgrid, qk_sf)
} else {
rv$intersect <- NULL
}
})
output$selectplot <- renderPlot({
plot(qk_mp, col="gray")
if(!is.null(rv$intersect)) {
plot(rv$intersect, pch=19, col="black", add=TRUE)
}
plot(st_union(rv$selectgrid), add=TRUE)
})
output$quakestat <- renderPlot({
plot(
stats::density(qk_sf$mag), col="gray30", ylim=c(0,1.2),
main = NA
)
if(!is.null(rv$intersect) && nrow(rv$intersect) > 0) {
lines(stats::density(rv$intersect$mag), col="red", lwd=2)
}
})
}
shinyApp(ui, server)
------
# run select demo for the quake data
#  we will need the qk_sf
#  to test
# plot(qk_sf)
library(mapedit)
library(mapview)
library(shiny)
ui <- fluidPage(
fluidRow(
# edit module ui
column(6, editModUI("editor")),
column(
6,
h3("Boxplot of Depth"),
plotOutput("selectstat")
)
)
)
server <- function(input, output, session) {
# edit module returns sf
edits <- callModule(editMod, "editor", mapview(qk_sf)@map)
output$selectstat <- renderPlot({
req(edits()$finished)
qk_intersect <- st_intersection(edits()$finished, qk_sf)
req(nrow(qk_intersect) > 0)
boxplot(
list(
all = as.numeric(qk_sf$depth),
selected = as.numeric(qk_intersect$depth)
),
xlab = "depth"
)
})
}
shinyApp(ui, server)
library(sf)
# simplified border for purpose of exercise
border <- st_as_sfc(
"LINESTRING(-109.050197582692 31.3535554844322, -109.050197582692 31.3535554844322, -111.071681957692 31.3723176640684, -111.071681957692 31.3723176640684, -114.807033520192 32.509681296831, -114.807033520192 32.509681296831, -114.741115551442 32.750242384668, -114.741115551442 32.750242384668, -117.158107738942 32.5652527715121, -117.158107738942 32.5652527715121)"
) %>%
st_set_crs(4326)
# plot quickly for visual inspection
plot(border)
library(mapview)
library(mapedit)
new_borders <- mapview(border) %>%
editMap("border")
new_borders
new_borders <- mapview(border) %>%
editMap("border")
new_borders
plot(new_borders)
plot(border)
plot(new_borders$edited)
plot(border)
plot(new_borders$edited)
new_borders$edited$X_leaflet_id
new_borders$edited
plot(new_borders$edited[[1]])
plot(new_borders$edited[1])
plot(border, add = T)
plot(new_borders$edited[1])
plot(border, add = T)
plot(new_borders$edited[1])
par(mfrow = c(1,2))
plot(border, add = T)
par(mfrow = c(1,2))
plot(border)
plot(new_borders$edited[1])
plot(border, main = "old border")
plot(new_borders$edited[1],  main = "new border")
# simplified border for purpose of exercise
border <- st_as_sfc(
"POLYGON(-109.050197582692 31.3535554844322, -109.050197582692 31.3535554844322, -111.071681957692 31.3723176640684, -111.071681957692 31.3723176640684, -114.807033520192 32.509681296831, -114.807033520192 32.509681296831, -114.741115551442 32.750242384668, -114.741115551442 32.750242384668, -117.158107738942 32.5652527715121, -117.158107738942 32.5652527715121)"
) %>%
st_set_crs(4326)
border <- st_as_sfc(
"POLYGON(-109.050197582692 31.3535554844322, -109.050197582692 31.3535554844322, -111.071681957692 31.3723176640684, -111.071681957692 31.3723176640684, -114.807033520192 32.509681296831, -114.807033520192 32.509681296831, -114.741115551442 32.750242384668, -114.741115551442 32.750242384668, -117.158107738942 32.5652527715121, -117.158107738942 32.5652527715121)"
) %>%
st_set_crs(4326)
?st_as_sfc
# simplified border for purpose of exercise
border <- st_as_sfc(
"LINESTRING(-109.050197582692 31.3535554844322, -109.050197582692 31.3535554844322, -111.071681957692 31.3723176640684, -111.071681957692 31.3723176640684, -114.807033520192 32.509681296831, -114.807033520192 32.509681296831, -114.741115551442 32.750242384668, -114.741115551442 32.750242384668, -117.158107738942 32.5652527715121, -117.158107738942 32.5652527715121)"
) %>%
st_set_crs(4326)
library(mapview)
library(mapedit)
what_we_created <- mapview() %>%
editMap()
what_we_created
plot(what_we_created$finished)
mapview(what_we_created$finished)
mapview(what_we_created)
mapview(what_we_created$drawn)
mapview(what_we_created$edited)
mapview(what_we_created$finished )
what_we_created$finished
?mapview
mapview(franconia, burst = TRUE, hide = TRUE)
library(shiny)
edited_features <- runGitHub(
"geojson.io", "timelyportfolio", ref="shiny"
)
edited_features
plot(edited_features)
plot(edited_features$type)
edited_features$type
plot(edited_features$features)
edited_features$features
if (!require(geojsonio)) {
install.packages("geojsonio")
library(geojsonio)
}
data_json <- geojson_read(edited_features, what = "sp")
?geojson_read
data_json <- geojson_read(https://gist.githubusercontent.com/anonymous/fa5fc0de9989cb5f9d647514b3ea63c8/raw/0ccc7aa6b48a6a527df3a17802bfa76c73bda1d0/map.geojson, what = "sp")
data_json <- geojson_read("https://gist.githubusercontent.com/anonymous/fa5fc0de9989cb5f9d647514b3ea63c8/raw/0ccc7aa6b48a6a527df3a17802bfa76c73bda1d0/map.geojson", what = "sp")
data_json
mapview(data_json)
# from umap
data_json <- geojson_read("C:/Users/bmarwick/Downloads/untitled_map.geojson",
what = "sp")
plot(data_json)
plot(data_json$name)
data_json
mapview(data_json)
install.packages("infer")
mtcars <- as.data.frame(mtcars) %>%
mutate(cyl = factor(cyl),
vs = factor(vs),
am = factor(am),
gear = factor(gear),
carb = factor(carb))
library(tidyverse)
mtcars <- as.data.frame(mtcars) %>%
mutate(cyl = factor(cyl),
vs = factor(vs),
am = factor(am),
gear = factor(gear),
carb = factor(carb))
mtcars %>%
specify(am ~ vs, success = "1")
library(infer)
mtcars %>%
specify(am ~ vs, success = "1")
mtcars
mtcars %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence")
mtcars %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute")
mtcars %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("1", "0"))
mtcars %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("1", "0")) %>%
vizualise()
mtcars %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("1", "0")) %>%
visualize()
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F")
# Permutation test for two binary variables
mtcars %>%
dplyr::mutate(am = factor(am), vs = factor(vs)) %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute")
# Permutation test for two binary variables
mtcars %>%
dplyr::mutate(am = factor(am), vs = factor(vs)) %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "prop")
# Permutation test for two binary variables
mtcars %>%
dplyr::mutate(am = factor(am), vs = factor(vs)) %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props")
# Permutation test for two binary variables
mtcars %>%
dplyr::mutate(am = factor(am), vs = factor(vs)) %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("1", "0"))
mtcars %>%
specify(response = am, success = "1") %>% # formula alt: am ~ NULL
hypothesize(null = "point", p = .25)
devtools::install_github("milesmcbain/packup")
mtcars %>%
specify(cyl ~ NULL) %>% # alt: response = cyl
hypothesize(null = "point", p = c("4" = .5, "6" = .25, "8" = .25)) %>%
generate(reps = 100, type = "simulate") %>%
calculate(stat = "Chisq")
mtcars %>%
specify(cyl ~ NULL) %>% # alt: response = cyl
hypothesize(null = "point", p = c("4" = .5, "6" = .25, "8" = .25))
mtcars %>%
specify(cyl ~ NULL)
table(mtcars$cyl)
library(janitor)
tabyl(mtcars$cly)
tabyl(mtcars$cyl)
?hypothesize
rgl::readSTL()
xx <- -6433/Wits-Dinaledi-U_W_101-002_M6539-6433.ply")
xx <- rgl::readSTL("C:/Users/bmarwick/Downloads/Morphosource_Wits-Dinaledi-U_W_101-002_M6539-6433/Wits-Dinaledi-U_W_101-002_M6539-6433.ply")
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F")
# Permutation test similar to ANOVA
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F") %>%
visualize()
anova <- aov(mpg ~ factor(cyl), data = mtcars)
anova
anova <- summary(aov(mpg ~ factor(cyl), data = mtcars))
anova
anova
anova[[1
]]
anova$`F value`
str(anova
)
anova[[1$`F value`
anova[[1]]$`F value`
anova <- summary(aov(mpg ~ factor(cyl), data = mtcars))[[1]]$F value`[1]
summary(aov(mpg ~ factor(cyl), data = mtcars))
summary(aov(mpg ~ factor(cyl), data = mtcars))[[1]]
anova <- summary(aov(mpg ~ factor(cyl), data = mtcars))[[1]]$`F value`[1]
anova
f_hat <- summary(aov(mpg ~ factor(cyl), data = mtcars))[[1]]$`F value`[1]
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F")
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F") %>%
ggplot(aes(x = stat)) +
+ geom_density(bw = .05)
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F") %>%
ggplot(aes(x = stat)) +
+ geom_density(bw = .05)
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F") %>%
ggplot(aes(x = stat)) +
+ geom_histogram(bw = .05) +
# Permutation test for two binary variables
mtcars %>%
dplyr::mutate(am = factor(am), vs = factor(vs)) %>%
specify(am ~ vs, success = "1") %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "diff in props", order = c("1", "0"))
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F") %>%
ggplot(aes(x = stat)) +
geom_histogram(bw = .05) +
geom_vline(xintercept = f_hat)
source('~/.active-rstudio-document', echo=TRUE)
summary(aov(mpg ~ factor(cyl), data = mtcars))
# test statistic on data from the null hyposthesis
f_null <-
mtcars %>%
dplyr::mutate(cyl = factor(cyl)) %>%
specify(mpg ~ cyl) %>%
hypothesize(null = "independence") %>%
generate(reps = 100, type = "permute") %>%
calculate(stat = "F")
# visualise test stat on data and data under null
ggplot(f_null,
aes(x = stat)) +
geom_histogram(bw = .05) +
geom_vline(xintercept = f_hat)
# visualise test stat on data and data under null
ggplot(f_null,
aes(x = stat)) +
geom_histogram(bw = .05) +
geom_vline(xintercept = f_hat,
colour = "red",
size = 2)
# compute p-value
sum(f_null$stat <= f_hat)
# compute p-value
sum(f_null$stat >= f_hat)
# compute p-value
sum(f_null$stat >= f_hat) / sum(sum(f_null$stat)
)
# compute p-value
sum(f_null$stat >= f_hat) / sum(f_null$stat)
setwd("D:/My Documents/My UW/Benefits/Tenure/bm-vita")
setwd("D:/My Documents/My UW/Benefits/Tenure/bm-vita")
